/*
 * Copyright (C) 2021 University Hospital Bonn - All Rights Reserved You may use, distribute and
 * modify this code under the GPL 3 license. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT
 * PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
 * OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
 * IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 * YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
 * OR CORRECTION. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY
 * COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE,
 * BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
 * ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA
 * OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE
 * PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGES. You should have received a copy of the GPL 3 license with *
 * this file. If not, visit http://www.gnu.de/documents/gpl-3.0.en.html
 */

package de.medizininformatik_initiative.process.report.service;

import org.camunda.bpm.engine.delegate.DelegateExecution;
import org.hl7.fhir.r4.model.IdType;
import org.hl7.fhir.r4.model.QuestionnaireResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.medizininformatik_initiative.process.report.ConstantsReport;
import dev.dsf.bpe.v1.ProcessPluginApi;
import dev.dsf.bpe.v1.activity.AbstractServiceDelegate;
import dev.dsf.bpe.v1.variables.Variables;

public class SendEMailDataNotDeliveredTimeoutApproval extends AbstractServiceDelegate
{
	private static final Logger logger = LoggerFactory.getLogger(SendEMailDataNotDeliveredTimeoutApproval.class);

	public SendEMailDataNotDeliveredTimeoutApproval(ProcessPluginApi api)
	{
		super(api);
	}

	@Override
	protected void doExecute(DelegateExecution execution, Variables variables)
	{
		String message = "Unfortunately, the time limit for performing an approval of the data generated by this process has expired. The data transfer was therefore cancelled without sending data to the NUM dashboard.";

		String ddpBinary = variables
				.getString(ConstantsReport.BPMN_EXECUTION_VARIABLE_DASHBOARD_REPORT_DDP_JSON_RESPONSE_REFERENCE);
		IdType binaryId = new IdType(ddpBinary);
		String ref = binaryId.getResourceType() + "/" + binaryId.getIdPart();

		String subject = "Approval of DDP data - " + ref;
		api.getMailService().send(subject, message);

		String approvalQuestionnaireResponse = variables.getString(
				ConstantsReport.BPMN_EXECUTION_VARIABLE_DASHBOARD_REPORT_DDP_APPROVAL_QUESTIONNAIRERESPONSE_REFERENCE);
		deleteQuestionnaireResponse(approvalQuestionnaireResponse);
	}

	public void deleteQuestionnaireResponse(String url)
	{
		try
		{
			// Parse the binary URL to create an IdType
			IdType id = new IdType(url);

			// Use the FHIR client to delete the Binary resource
			// mark for deletion
			api.getFhirWebserviceClientProvider().getLocalWebserviceClient().delete(QuestionnaireResponse.class,
					id.getIdPart());
			// delete
			api.getFhirWebserviceClientProvider().getLocalWebserviceClient()
					.deletePermanently(QuestionnaireResponse.class, id.getIdPart());

			logger.info("Successfully deleted Binary resource with ID: {}", id.getValue());
		}
		catch (Exception exception)
		{
			logger.warn("Could not delete binary - {}", exception.getMessage());
			throw new RuntimeException("Could not delete binary - " + exception.getMessage(), exception);
		}
	}
}
